# input AMPLIFY {
#     globalAuthRule: AuthRule = { allow: public }
# } # FOR TESTING ONLY!

type Product  # type Book
    @model(subscriptions: null)
    @auth(
        rules: [
            # allow admins to create, update and delete books
            { allow: groups, groups: ["Admin"] }
            # allow all authenticated users to view books
            { allow: private, operations: [read] }
            # allow all guest users (not authenticated) to view books
            { allow: public, operations: [read] }
        ]
    ) {
    id: ID! @primaryKey
    name: String! # title: String!
    description: String
    image: String
    seller: String # author: String!
    featured: Boolean
    price: Float
    orders: [ProductOrder] @hasMany(indexName: "byProduct", fields: ["id"])
}

type ProductOrder
    @model(queries: null, subscriptions: null)
    @auth(
        rules: [
            # allow admins to create productorders for customers by using customer email in lambda
            { allow: owner, identityClaim: "email", ownerField: "customer" }
            { allow: groups, groups: ["Admin"] }
        ]
    ) {
    id: ID! @primaryKey
    product_id: ID! @index(name: "byProduct", sortKeyFields: ["order_id"])
    order_id: ID! @index(name: "byOrder", sortKeyFields: ["product_id"])
    product: Product @hasOne(fields: ["product_id"])
    order: Order @hasOne(fields: ["order_id"])
}

type Order
    @model(subscriptions: null)
    @auth(
        rules: [
            # only owner can see his orders
            { allow: owner, identityClaim: "email", ownerField: "customer" }
            # allow admins to view orders
            { allow: groups, groups: ["Admin"] }
        ]
    ) {
    id: ID! @primaryKey
    user: String! @index(name: "byUser")
    date: String
    total: Float
    products: [ProductOrder] @hasMany(indexName: "byOrder", fields: ["id"])
}

enum OrderStatus {
    SUCCESS
    FAILED
}

input CartItem {
    id: ID!
    name: String
    image: String
    price: Float
    amount: Int
}

input ProcessOrderInput {
    id: ID!
    cart: [CartItem]
    total: Float!
    token: String!
    address: String
}

type Mutation {
    processOrder(input: ProcessOrderInput!): OrderStatus
        @function(name: "processPayment-${env}")
        @function(name: "createOrder-${env}")
}
